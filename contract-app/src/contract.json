{
  "code": "#include \"FungibleToken.h\"\n#include \"emscripten/bind.h\"\n\nusing namespace emscripten;\n\n\nFungibleToken::FungibleToken(std::string owner) {\n  this->supply = 0;\n  this->owner = owner;\n}\n\nbool FungibleToken::setOwner(std::string SENDER, std::string newOwner) {\n  this->owner = newOwner;\n  return true;\n}\n\nbool FungibleToken::mint(std::string SENDER, unsigned int amount) {\n  // only the owner can mint\n  if (SENDER != this->owner) {\n    return false;\n  }\n\n  // mint tokens, assign to owner\n  this->supply = this->supply + amount;\n\n  // increment owner balance\n  if (this->balances.find(SENDER) == this->balances.end()) {\n    this->balances.insert(std::pair<std::string, unsigned int>(SENDER, amount));\n  } else {\n    unsigned int balance = this->balances[SENDER];\n    this->balances[SENDER] = balance + amount;\n  }\n\n  return true;\n}\n\nbool FungibleToken::transfer(std::string SENDER, std::string recipient, unsigned int amount) {\n  // check if SENDER has sufficient funds\n  if (this->balances[SENDER] < amount) {\n    return false;\n  }\n\n  // increment recipient balance\n  if (this->balances.find(recipient) == this->balances.end()) {\n    this->balances.insert(std::pair<std::string, unsigned int>(recipient, amount));\n  } else {\n    unsigned int recipientBalance = this->balances[recipient];\n    this->balances[recipient] = recipientBalance + amount;\n  }\n\n  // decrement SENDER balance\n  int senderBalance = this->balances[SENDER];\n  this->balances[SENDER] = senderBalance - amount;\n\n  return true;\n}\n\nconst unsigned int& FungibleToken::getSupply() {\n  return this->supply;\n}\n\nconst std::string& FungibleToken::getOwner() {\n  return this->owner;\n}\n\nconst unsigned int& FungibleToken::getBalance(std::string address) {\n  return this->balances[address];\n}\n\nconst std::map<std::string, unsigned int>& FungibleToken::getBalances() {\n  return this->balances;\n}\n\nEMSCRIPTEN_BINDINGS(FungibleToken_example) {\n  register_vector<std::string>(\"keys\");\n  register_map<std::string, unsigned int>(\"balances\");\n  class_<FungibleToken>(\"FungibleToken\").constructor<std::string>()\n    .function(\"setOwner\", &FungibleToken::setOwner)\n    .function(\"mint\", &FungibleToken::mint)\n    .function(\"transfer\", &FungibleToken::transfer)\n    .function(\"getSupply\", &FungibleToken::getSupply)\n    .function(\"getOwner\", &FungibleToken::getOwner)\n    .function(\"getBalance\", &FungibleToken::getBalance)\n    .function(\"getBalances\", &FungibleToken::getBalances);\n }\n",
  "id": "63eec681025b07b9aa9d3720a125ce33dfd46e0b940a518100811c1f4eea86f0"
}
